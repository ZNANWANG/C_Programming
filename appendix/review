C语言学习

1.计算机里的CPU可以直接运行人类编写的程序吗？为什么说编程语言不是和计算机交谈的语言？
答：编程语言属于高级语言，计算机只能识别机器语言，二者语言不同，需要通过编译器将高级语言转变为机器语言，这样计算机才能够识别。
2.程序的执行：
（1）解释：借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行。
（2）编译：借助一个程序，就像一个翻译，把你的程序翻译成为计算机真正能够读懂的语言——机器语言——写的程序，然后这个机器语言写的程序就能直接执行了。
3.有的编程语言既可以编译执行，又可以解释执行。Java语言是先通过javac.exe进行编译，编译后生成一个class文件，但是计算机不能直接执行class文件，所
以需要用java命令调用java虚拟机JVM（仿真程序）来解释执行。
4.赋值运算符有返回值。
a = b = 6 -> a = (b = 6) -> a = 6 b = 6
5.所有的关系运算符的优先级都比算术运算符的低，但比赋值运算符的高。判断是否相等的运算符==和!=的优先级比其他关系运算符的低，而连续的关系运算是从左
到右结合的。
6.运算符：operator 算子：operand
7. //是C99的单行注释，ANSI C不支持。/*  */是多行注释，也可以用于单行的注释。
8.0中间的一点或者一杠是为了和o区别，这是从电报时代延续下来的传统。
9.以下语句不表示n属于[1,10]：
    if ( 1<=n<=10 );
10.多行注释/* */会被编译器替换为空格，例如：
    #include <stdio.h>

    int main() {
        int/*test*/a;//编译成功
    //    in/*test*/tb;//编译出错，
        return 0;
    }
11.测试数据经常使用边界数据，如有效范围两端的数据，特殊的倍数，0，负数等等。
12.逻辑运算是对逻辑量进行的运算，结果只能是0或1，逻辑量是关系运算或者逻辑运算的结果。
13.#include <stdbool.h>
   bool t = true;
14.关系运算优先级：!> && > ||
15.短路：逻辑运算是自左向右进行的，如果左边的结果已经能够决定结果了，就不会做右边的计算。
16.逗号运算符优先级最低。
17.建议在if或else后面总是加上大括号{}，即使在只包括一条语句的情况下。
18.级联if-else。
    if {

    } else if {

    } else {

    }
19.推荐单一出口的代码写法。
(1) 单一出口：
    if(x < 0) {
        f = x * x;
    } else if(x == 0) {
        f = 0;
    } else if{
        f = 2 * x;
    }
    printf("f = %d", f);

(2) 多路出口：
    if(x < 0) {
        printf("f = %d", x * x);
    } else if(x == 0) {
        printf("f = %d", 0);
    } else if{
        printf("f = %d", 2 * x);
    }
20.switch-case:
（1）控制表达式只能是整数型的结果，即下例中type需要是整数型的结果。
    switch(type){
        case 1:
            printf("早上好");
            break;
        case 2:
            printf("下午好");
            break;
        case 3:
            printf("晚上好");
            break;
        default:
            printf("你好");
            break;
    }
21.rand()生成随机数
    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h>
    int main(){
        srand(time(O));
        int t = rand();
        return 0;
    }
22. x % n得到的数在[0, n - 1]范围内，因此可以用x % 100随机产生一个一百以内的非负整数。
23.int main()中的return 0；相当于Java中的System.exit(0);，可以省略不写，编译器默认return 0.
24.接力break —— 跳出多重循环
    int exit = 0;
    for (int one = 0; one <= total * 10; one++) {
        for (int two = 0; two <= total * 5; two++) {
            for (int five = 0; five <= total * 2; five++) {
                if (one + two * 2 + five * 5 == total * 10) {
                    printf("%d个一角、%d个两角和%d个五角能凑成%d元。\n", one, two, five, total);
                    exit = 1;
                    break;
                }
            }
            if(exit){
                break;
            }
        }
        if(exit){
            break;
        }
    }
    return 0;
25.goto语句 —— 跳出多重循环
    for (int one = 0; one <= total * 10; one++) {
        for (int two = 0; two <= total * 5; two++) {
            for (int five = 0; five <= total * 2; five++) {
                if (one + two * 2 + five * 5 == total * 10) {
                    printf("%d个一角、%d个两角和%d个五角能凑成%d元。\n", one, two, five, total);
                    goto out;
                }
            }
        }
    }
    out:
    return 0;
26.编译器和运行环境都不会检查数组下标是否越界，无论是对数组单元做读还是写，一旦程序运行，越界的数组访问可能造成问题，导致程序崩溃（segment
fault），但是也有可能运气好，没造成严重的后果，所以程序员有责任来保证程序只使用有效的下标值[0,数组的长度-1].
27.可以定义int array[0];，但是这种数组毫无用处。
28.C的编译器自上而下分析代码，调用的函数需要在之前定义过。
29.调用函数时给的值与参数类型不匹配是C语言传统上最大的漏洞，编译器总是悄悄替你把类型转换好，但是这很可能不是你所期望的，后续的语言，C++/Java在
这方面很严格。
30.C语言在调用函数时，永远只能传递值给函数。
31.每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系。
32.本地变量（局部变量/自动变量）：函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数这次运行所独有的，称作本地变量。定义在函
数内部的就是本地变量，参数也是本地变量。
33.变量的生存期和作用域：
生存期：什么时候这个变量开始出现了，到什么时候它消亡了。
作用域：在代码的什么范围内可以访问这个变量（这个变量可以起作用）。
本地变量的生存期和作用域是代码块。
36.void f()在传统的C中，表示f函数的参数未知，并不表示没有参数；而void f(void)则表示没有参数并且没有返回值。
37.C语言不允许函数嵌套定义，允许有函数原型声明，但是不能包括函数体。
38.二维数组的初始化：
    int a[][5] = {
    {1,2,3,4,5},
    {6,7,8,9,10},
    };
    (1)列数必须提前给出，行数可以由编译器来数。
    (2)每行一个{}，用逗号隔开。
    (3)最后的逗号可以存在，有古老的传统。
    (4)如果省略，表示补零。