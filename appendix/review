C语言学习

1.计算机里的CPU可以直接运行人类编写的程序吗？为什么说编程语言不是和计算机交谈的语言？
答：编程语言属于高级语言，计算机只能识别机器语言，二者语言不同，需要通过编译器将高级语言转变为机器语言，这样计算机才能够识别。
2.程序的执行：
（1）解释：借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行。
（2）编译：借助一个程序，就像一个翻译，把你的程序翻译成为计算机真正能够读懂的语言——机器语言——写的程序，然后这个机器语言写的程序就能直接执行了。
3.有的编程语言既可以编译执行，又可以解释执行。Java语言是先通过javac.exe进行编译，编译后生成一个class文件，但是计算机不能直接执行class文件，所
以需要用java命令调用java虚拟机JVM（仿真程序）来解释执行。
4.赋值运算符有返回值。
a = b = 6 -> a = (b = 6) -> a = 6 b = 6
5.所有的关系运算符的优先级都比算术运算符的低，但比赋值运算符的高。判断是否相等的运算符==和!=的优先级比其他关系运算符的低，而连续的关系运算是从左
到右结合的。
6.运算符：operator 算子：operand
7. //是C99的单行注释，ANSI C不支持。/*  */是多行注释，也可以用于单行的注释。
8.0中间的一点或者一杠是为了和o区别，这是从电报时代延续下来的传统。
9.以下语句不表示n属于[1,10]：
    if ( 1<=n<=10 );
10.多行注释/* */会被编译器替换为空格，例如：
    #include <stdio.h>

    int main() {
        int/*test*/a;//编译成功
    //    in/*test*/tb;//编译出错，
        return 0;
    }
11.测试数据经常使用边界数据，如有效范围两端的数据，特殊的倍数，0，负数等等。
12.逻辑运算是对逻辑量进行的运算，结果只能是0或1，逻辑量是关系运算或者逻辑运算的结果。
13.#include <stdbool.h>
   bool t = true;
14.关系运算优先级：!> && > ||
15.短路：逻辑运算是自左向右进行的，如果左边的结果已经能够决定结果了，就不会做右边的计算。
16.逗号运算符优先级最低。
17.建议在if或else后面总是加上大括号{}，即使在只包括一条语句的情况下。
18.级联if-else。
    if {

    } else if {

    } else {

    }
19.推荐单一出口的代码写法。
(1) 单一出口：
    if(x < 0) {
        f = x * x;
    } else if(x == 0) {
        f = 0;
    } else if{
        f = 2 * x;
    }
    printf("f = %d", f);

(2) 多路出口：
    if(x < 0) {
        printf("f = %d", x * x);
    } else if(x == 0) {
        printf("f = %d", 0);
    } else if{
        printf("f = %d", 2 * x);
    }
20.switch-case:
（1）控制表达式只能是整数型的结果，即下例中type需要是整数型的结果。
    switch(type){
        case 1:
            printf("早上好");
            break;
        case 2:
            printf("下午好");
            break;
        case 3:
            printf("晚上好");
            break;
        default:
            printf("你好");
            break;
    }
21.rand()生成随机数
    #include <stdio.h>
    #include <stdlib.h>
    #include <time.h>
    int main(){
        srand(time(O));
        int t = rand();
        return 0;
    }
22. x % n得到的数在[0, n - 1]范围内，因此可以用x % 100随机产生一个一百以内的非负整数。
23.int main()中的return 0；相当于Java中的System.exit(0);，可以省略不写，编译器默认return 0.
24.接力break —— 跳出多重循环
    int exit = 0;
    for (int one = 0; one <= total * 10; one++) {
        for (int two = 0; two <= total * 5; two++) {
            for (int five = 0; five <= total * 2; five++) {
                if (one + two * 2 + five * 5 == total * 10) {
                    printf("%d个一角、%d个两角和%d个五角能凑成%d元。\n", one, two, five, total);
                    exit = 1;
                    break;
                }
            }
            if(exit){
                break;
            }
        }
        if(exit){
            break;
        }
    }
    return 0;
25.goto语句 —— 跳出多重循环
    for (int one = 0; one <= total * 10; one++) {
        for (int two = 0; two <= total * 5; two++) {
            for (int five = 0; five <= total * 2; five++) {
                if (one + two * 2 + five * 5 == total * 10) {
                    printf("%d个一角、%d个两角和%d个五角能凑成%d元。\n", one, two, five, total);
                    goto out;
                }
            }
        }
    }
    out:
    return 0;
26.编译器和运行环境都不会检查数组下标是否越界，无论是对数组单元做读还是写，一旦程序运行，越界的数组访问可能造成问题，导致程序崩溃（segment
fault），但是也有可能运气好，没造成严重的后果，所以程序员有责任来保证程序只使用有效的下标值[0,数组的长度-1].
27.可以定义int array[0];，但是这种数组毫无用处。
28.C的编译器自上而下分析代码，调用的函数需要在之前定义过。
29.调用函数时给的值与参数类型不匹配是C语言传统上最大的漏洞，编译器总是悄悄替你把类型转换好，但是这很可能不是你所期望的，后续的语言，C++/Java在
这方面很严格。
30.C语言在调用函数时，永远只能传递值给函数。
31.每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系。
32.本地变量（局部变量/自动变量）：函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数这次运行所独有的，称作本地变量。定义在函
数内部的就是本地变量，参数也是本地变量。
33.变量的生存期和作用域：
生存期：什么时候这个变量开始出现了，到什么时候它消亡了。
作用域：在代码的什么范围内可以访问这个变量（这个变量可以起作用）。
本地变量的生存期和作用域是代码块。
36.void f()在传统的C中，表示f函数的参数未知，并不表示没有参数；而void f(void)则表示没有参数并且没有返回值。
37.C语言不允许函数嵌套定义，允许有函数原型声明，但是不能包括函数体。
38.二维数组的初始化：
    int a[][5] = {
    {1,2,3,4,5},
    {6,7,8,9,10},
    };
    (1)列数必须提前给出，行数可以由编译器来数。
    (2)每行一个{}，用逗号隔开。
    (3)最后的逗号可以存在，有古老的传统。
    (4)如果省略，表示补零。
39.数组的集成初始化：
int a[] = {1,2,3,4,5,6,7,8,9};
40.数组集成初始化时的定位：
int a[] = {
    [0] = 0, [2] = 4, 5,
}
41.数组的大小：sizeOf(a)/sizeOf(a[0])，其中sizeOf(a)给出整个数组所占据内容的大小，单位是字节。
42.数组作为函数参数时，往往需要用另一个参数来传入数组大小；数组作为函数参数时，不能再利用sizeOf来计算数组的元素个数。
43.1美分 —— penny， 5美分 —— nickel， 10美分 —— dime， 25美分 —— quarter， 50美分 —— half-dollar.
44.下面是一些在软件中常用的反义词组。
   add / remove            begin / end            create / destroy
   insert / delete         first / last           get / release
   increment / decrement   put / get              left / right
   add / delete            lock / unlock          open / close
   min / max               old / new              start / stop
   next / previous         source / target        show / hide
   send / receive          source / destination
   cut / paste             up / down
45.sizeOf是一个运算符，给出某个变量或者类型在内存中所占用的字节数，例如sizeOf(int)或sizeOf(i)。
46.&是一个运算符，用于获得变量的地址，&的操作数必须是变量。地址的大小是否与int相同取决于编译器是32位架构还是64位架构，输出地址举例如下：
    int i;
    printf("%p",&i);
47.&的操作数必须是变量，以下是错误的例子：
    &(a+b),&(a++),&(++a)
48.指针就是保存地址的变量。
    int i;
    int* p = &i;
    int* p,q; // *可以靠近int，p是指针，指向i，q只是int型变量。
    int *p,q; // *也可以靠近p，p是指针，指向i，q只是int型变量。
    int *p,*q; // p和q都是指针。
49.指针变量：变量的值是内存地址。普通变量的值是实际的值，指针变量的值是具有实际值的变量的地址。
50.*是一个单目运算符，用来访问指针的值所表示的地址上的变量，可以做右值（放在等号右边）也可以做左值（放在等号左边），例如：右值 —— int k = *p;
左值 —— *p = k + 1;
51.数组参数：数组变量是特殊的指针。
下面四种函数原型是等价的：
    int sum(int *ar, int n);
    int sum(int *, int);
    int sum(int ar[], int n);
    int sum(int [], int);
52.数组变量本身表达地址，所以int a[10]; int *p = a;//无需用&来取地址，但是数组的单元表达的是变量，需要用&来取地址，且a == *a[0]。
53.[]运算符可以对数组做，也可以对指针做：p[0] <==> a[0];
54.数组变量是const的指针，所以不能被赋值。
55.如果：
   int a[] = {0};
   int *p = a;
   则以下哪些表达式的结果为真？(BCD)
   A.p == a[0]
   B.p == &a[0]
   C.*p == a[0]
   D.p[0] == a[0]
56.c + 'a' - 'A'可以把一个大写字母变成小写字母，c - 'a' + 'A'可以把一个小写字母变成大写字母。
57.字符串变量定义：
    char *p = "hello";
    char p[] = "hello";
    char p[10] = "hello";
58.C语言的字符串是以字符数组的形态存在的，不能用运算符对字符串进行运算，通过遍历数组的方式可以遍历字符串，唯一特殊的地方是字符串字面量可以用来初
始化字符数组。
59.char*是字符串？
答：char*不一定是字符串，本意是指向字符的指针，可能指向的是字符的数组（就像int*一样）；只有它所指的字符数组有结尾的0，才能说它所指的是字符串。
60.常见错误
    char *string;
    scanf("%s", string);
以为char*是字符串类型，定义了一个字符串类型的变量string就可以直接使用了。
由于没有对string初始化为0，所以不一定每次运行都出错。
61.空字符串
char buffer[100] = ""; 这是一个空字符串，buffer[0] == '\0'，而且这个数组长度只有1。
62.*p++
取出p所指的那个数据来，完事之后顺便把p移到下一个位置上去。
*的优先级低于++。
常用于数组类的连续空间操作。
在某些CPU上，可以被直接翻译成一条汇编指令，效率比较高。
63.0地址
当然你的内存中有0地址，但是通常0地址是个不能随便碰的地址，所以你的指针不应该具有0值。
0地址可以被用来表示特殊的事情：
（1）返回的指针是无效的；
（2）指针没有被真正初始化（先初始化为0）
NULL是一个预定定义的符号，表示0地址，有的编译器不愿意你用0来表示0地址。
64.指针的类型
无论指向什么类型，所有指针的大小都是一样的，因为都是地址。
但是指向不同类型的指针是不能直接相互赋值的，这是为了避免用错指针。
65.指针类型的转换
void*表示不知道指向什么东西的指针，计算时与char*相同（但不相通）。
指针也可以转换类型：int *p = &i; void *q = (void*)p;
这并没有改变p所指的变量类型，而是让后人用不同的眼光通过q看它所指的变量。（我不再当你是int了，我认为你就是个void）
